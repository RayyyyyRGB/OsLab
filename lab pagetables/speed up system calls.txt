步骤1：在kernel/proc.h中的struct proc在增加一个域，存储共享内存块的物理地址。
//added by rqx 2023/7/27
  struct usyscall *usyscall;

步骤2：在kernel/proc.c的allocproc函数中增加申请共享内存页。
 //added by rqx 2023/7/27
  if((p->usyscall = (struct usyscall *)kalloc()) == 0){
    freeproc(p);
    release(&p->lock);
    return 0;
  }

步骤3：在kernel/proc.c的proc_pagetable函数中增加在内核中共享内存页的初始化，以及对共享内存块的页表初始化。

/*
 * the kernel's page table.
 */
extern pagetable_t kernel_pagetable;
 
// Create a user page table for a given process,
// with no user memory, but with trampoline pages.
pagetable_t
proc_pagetable(struct proc *p)
{
  pagetable_t pagetable;
 
  // An empty page table.
  pagetable = uvmcreate();
  if(pagetable == 0)
    return 0;
 
  // map the trampoline code (for system call return)
  // at the highest user virtual address.
  // only the supervisor uses it, on the way
  // to/from user space, so not PTE_U.
  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
              (uint64)trampoline, PTE_R | PTE_X) < 0){
    uvmfree(pagetable, 0);
    return 0;
  }
 
  // map the trapframe just below TRAMPOLINE, for trampoline.S.
  if(mappages(pagetable, TRAPFRAME, PGSIZE,
              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
    uvmfree(pagetable, 0);
    return 0;
  }
 
  // map the USYSCALL just below TRAPFRAME.
  if(mappages(pagetable, USYSCALL, PGSIZE,
               (uint64)(p->usyscall), PTE_R | PTE_U) < 0){
    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
    uvmunmap(pagetable, TRAPFRAME, 1, 0);
    uvmfree(pagetable, 0);
    return 0;
  }
 
  return pagetable;
}

步骤4：在kernel/proc.c的freeproc函数中增加释放共享内存块。
//added by rqx 2023/7/27
  if(p->usyscall)
    kfree((void*)p->usyscall);
  p->usyscall = 0;

步骤5：在kernel/proc.c的proc_freepagetable函数中增加一行释放页表中共享内存页项。
//added by rqx 2023/7/27
  //p->pagetable = proc_pagetable(p);
  if(mappages(pagetable, USYSCALL, PGSIZE, (uint64)(p->usyscall), PTE_R | PTE_U)< 0){
    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
    uvmunmap(pagetable, TRAPFRAME, 1, 0);
    uvmfree(pagetable, 0);
    return 0;
  }







