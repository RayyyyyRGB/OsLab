步骤1：在kernel/riscv.h中定义常量PTE_A。
//added by rqx 2023/7/29
#define PTE_A (1L << 6) // 1 -> Accessed
步骤2：在kernel/sysproc.c中编写sys_pgaccess函数。

int
sys_pgaccess(void)
{
  // lab pgtbl: your code here.  
  uint64 base;
  uint64 mask;  
  int len;  

  pagetable_t pagetable = 0;  
  unsigned int procmask = 0 ;
  pte_t *pte;

  struct proc *p = myproc();

  if(argaddr(0, &base) < 0 || argint(1, &len) < 0 || argaddr(2, &mask) < 0)
    return -1;
  if (len > sizeof(int)*8) 
    len = sizeof(int)*8;

  for(int i=0; i<len; i++) {
    pagetable = p->pagetable;
      
    if(base >= MAXVA)
      panic("pgaccess");

    for(int level = 2; level > 0; level--) {
      pte = &pagetable[PX(level, base)];
      if(*pte & PTE_V) {
        pagetable = (pagetable_t)PTE2PA(*pte);
      } else {
        return -1;
      }      
    }
    pte = &pagetable[PX(0, base)];
    if(pte == 0)
      return -1;
    if((*pte & PTE_V) == 0)
      return -1;
    if((*pte & PTE_U) == 0)
      return -1;  
    if(*pte & PTE_A) {  
      procmask = procmask | (1L << i);
      *pte = *pte & (~PTE_A);
    }
    base += PGSIZE;
  }

  pagetable = p->pagetable;
  return copyout(pagetable, mask, (char *) &procmask, sizeof(unsigned int));
}