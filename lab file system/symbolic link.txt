1.kernel/stat.h：

#define T_SYMLINK 4

kernel/fcntl.h：

#define O_NOFOLLOW 0x800

2.kernel/sysfile.c

//added by rqx 2023/8/7
uint64
sys_open(void)
{
  char path[MAXPATH];
  int fd, omode;
  struct file *f;
  struct inode *ip;
  int n;
  if((n = argstr(0, path, MAXPATH)) < 0 || argint(1, &omode) < 0)
    return -1;

  begin_op();

  if(omode & O_CREATE){
    ip = create(path, T_FILE, 0, 0);
    if(ip == 0){
      end_op();
      return -1;
    }
  } else {
    if((ip = namei(path)) == 0){
      end_op();
      return -1;
    }
    ilock(ip);


   for(int i = 0; i < 12; i++) {	 // 设定12是最大递归次数
      
        if(readi(ip, 0, (uint64)path, 0, MAXPATH) < MAXPATH){	// #define MAXPATH 128
            iunlockput(ip);
            end_op();
            return -1;
        }

        iunlockput(ip);
        if((ip = namei(path)) == 0){
          end_op();
          return -1;
        }
        ilock(ip);

        if(ip->type != T_SYMLINK)	// 找到不是软链接类型的文件inode，继续正常打开
          break;
      }
      if(ip->type == T_SYMLINK){	// 如果超出阈值，返回fail
        iunlockput(ip);
        end_op();
        return -1;
      }
    }

  if(ip->type == T_DIR && omode != O_RDONLY){
      iunlockput(ip);
      end_op();
      return -1;
    }
  }

  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
    iunlockput(ip);
    end_op();
    return -1;
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
    if(f)
      fileclose(f);
    iunlockput(ip);
    end_op();
    return -1;
  }

  if(ip->type == T_DEVICE){
    f->type = FD_DEVICE;
    f->major = ip->major;
  } else {
    f->type = FD_INODE;
    f->off = 0;
  }
  f->ip = ip;
  f->readable = !(omode & O_WRONLY);
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);

  if((omode & O_TRUNC) && ip->type == T_FILE){
    itrunc(ip);
  }

  iunlock(ip);
  end_op();

  return fd;
}

//added by rqx 2023/8/7
uint64
sys_symlink(void){
  char target[MAXPATH];
  char path[MAXPATH];
// 读入target和path
  if(argstr(0, target, MAXPATH) < 0 || argstr(1, path, MAXPATH) < 0)
    return -1;

  begin_op(); // called at the start of each FS system call.
  
  struct inode *ip; 
  if((ip = create(path, T_SYMLINK, 0, 0)) == 0)	
  {
    end_op(); 
    return -1; 
  }


// writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
  if(writei(ip, 0, (uint64)target, 0, MAXPATH) < MAXPATH)	
  {
    iunlockput(ip);
    end_op(); // called at the end of each FS system call.
    return -1;
  }
  
  iunlockput(ip);
  end_op(); // called at the end of each FS system call.
  return 0;

}