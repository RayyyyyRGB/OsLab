1 fs.h
#define NDIRECT 11	// 【DIRECT直接映射的块号，由12变为11】
#define NINDIRECT (BSIZE / sizeof(uint))	// 每个间接映射的块，映射多少物理块（大小固定）
#define MAXFILE (NDIRECT + NINDIRECT + NINDIRECT*NINDIRECT)	// 【文件的最大长度进行修改】

// On-disk inode structure
struct dinode {
  short type;           // File type
  short major;          // Major device number (T_DEVICE only)
  short minor;          // Minor device number (T_DEVICE only)
  short nlink;          // Number of links to inode in file system
  uint size;            // Size of file (bytes)
  uint addrs[NDIRECT+2];   // Data block addresses
  // NDIRECT+1 变为 【NDIRECT+2】
};

2.file.h
struct inode {
  uint dev;           // Device number
  uint inum;          // Inode number
  int ref;            // Reference count
  struct sleeplock lock; // protects everything below here
  int valid;          // inode has been read from disk?

  short type;         // copy of disk inode
  short major;
  short minor;
  short nlink;
  uint size;
  uint addrs[NDIRECT+2];
};

3.fs.c
static uint
bmap(struct inode *ip, uint bn)
{
  uint addr, *a;
  struct buf *bp;

  // direct blocks(0-10)
  if(bn < NDIRECT){
    if((addr = ip->addrs[bn]) == 0)	
      ip->addrs[bn] = addr = balloc(ip->dev);
    return addr;
  }
  

    bn -= NDIRECT
  if(bn < NINDIRECT){
    // Load indirect block, allocating if necessary.
    if((addr = ip->addrs[NDIRECT]) == 0)
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);  
    bp = bread(ip->dev, addr);	
    a = (uint*)bp->data;
    if((addr = a[bn]) == 0){	
      a[bn] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);	    return addr;
  }

  bn -= NINDIRECT;  //(0~256*256-1)

  if(bn < NINDIRECT * NINDIRECT){

    uint index_1 = bn / NINDIRECT;	
    uint index_2 = bn % NINDIRECT;	    
    if((addr = ip->addrs[NDIRECT+1]) == 0)
      ip->addrs[NDIRECT+1] = addr = balloc(ip->dev);  
    bp = bread(ip->dev, addr);
    a = (uint*)bp->data;
    if((addr = a[index_1]) == 0){
      a[index_1] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);

    bp = bread(ip->dev, addr);	
    a = (uint*)bp->data;
    if((addr = a[index_2]) == 0){
      a[index_2] = addr = balloc(ip->dev);
      log_write(bp);
    }
    brelse(bp);

    return addr;
  }

  panic("bmap: out of range");
}

void
itrunc(struct inode *ip)
{
  int i, j, k;
  struct buf *bp, *bp_doub;
  uint *a, *b;

  for(i = 0; i < NDIRECT; i++){
    if(ip->addrs[i]){
      bfree(ip->dev, ip->addrs[i]);
      ip->addrs[i] = 0;
    }
  }

  if(ip->addrs[NDIRECT]){
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
    a = (uint*)bp->data;
    for(j = 0; j < NINDIRECT; j++){
      if(a[j])
        bfree(ip->dev, a[j]);
    }
    brelse(bp);
    bfree(ip->dev, ip->addrs[NDIRECT]);
    ip->addrs[NDIRECT] = 0;
  }
  
  if(ip->addrs[NDIRECT+1]){
    bp = bread(ip->dev, ip->addrs[NDIRECT+1]);
    a = (uint*)bp->data;
    for (j = 0; j < NINDIRECT; j++){
      if(a[j]){
        bp_doub = bread(ip->dev, a[j]);
        b = (uint*)bp_doub->data;
        for (k = 0; k<NINDIRECT;k++){
          if(b[k])
            bfree(ip->dev, b[k]);
        }
        brelse(bp_doub);
        bfree(ip->dev, a[j]);
      }
    }
    brelse(bp);
    bfree(ip->dev, ip->addrs[NDIRECT+1]);
    ip->addrs[NDIRECT+1] = 0;
  }
  ip->size = 0;
  iupdate(ip);
}
